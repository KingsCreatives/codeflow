// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  clerkId          String     @unique
  name             String
  username         String     @unique
  email            String     @unique
  password         String?
  bio              String?
  picture          String
  location         String?
  portfolioWebsite String?
  reputation       Int        @default(0)
  joinedAt         DateTime   @default(now())

  // Relations
  savedQuestions   Question[] @relation("SavedQuestions")
  questions        Question[] @relation("UserQuestions")
  upvotedQuestions Question[] @relation("QuestionUpvotes")
  downvotedQuestions Question[] @relation("QuestionDownvotes")
  upvotedAnswers  Answer[]   @relation("AnswerUpvotes")
  downvotedAnswers Answer[]   @relation("AnswerDownvotes")
  followedTags     Tag[]      @relation("TagFollowers")
  answers          Answer[]   @relation("UserAnswers")

  Interaction Interaction[]
}

model Question {
  id          String     @id @default(uuid())
  title       String
  content     String
  views       Int        @default(0)
  createdAt   DateTime   @default(now())

  // Relations
  tags        Tag[]      @relation("QuestionTags")
  upvotes     User[]     @relation("QuestionUpvotes")
  downvotes   User[]     @relation("QuestionDownvotes")
  author      User       @relation("UserQuestions", fields: [authorId], references: [id])
  authorId    String
  savedBy     User[]     @relation("SavedQuestions")
  answers     Answer[]   @relation("QuestionToAnswers")

  Interaction Interaction[]
}

model Tag {
  id          String     @id @default(uuid())
  name        String     @unique
  createdOn   DateTime   @default(now())

  // Relations
  questions   Question[] @relation("QuestionTags")
  followers   User[]     @relation("TagFollowers")

  Interaction Interaction[] @relation("InteractionTags")
}
model Answer {
  id          String     @id @default(uuid())
  content     String
  views       Int        @default(0)
  createdAt   DateTime   @default(now())

  // Relations
  questionId  String
  question    Question   @relation("QuestionToAnswers", fields: [questionId], references: [id])
  author      User       @relation("UserAnswers", fields: [authorId], references: [id])
  authorId    String
  upvotes     User[]     @relation("AnswerUpvotes")
  downvotes   User[]     @relation("AnswerDownvotes")

  Interaction Interaction[]
} 

model Interaction {
  id        String   @id @default(uuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  action    String

  questionId String? 
  question   Question? @relation(fields: [questionId], references: [id])

  answerId   String?
  answer     Answer?   @relation(fields: [answerId], references: [id])

  tags      Tag[]     @relation("InteractionTags")

  createdAt DateTime  @default(now())
}



